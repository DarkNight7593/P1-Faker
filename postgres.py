import os
import psycopg2
from faker import Faker
from random import choice, randint
from dotenv import load_dotenv

load_dotenv()
faker = Faker()

# ------------------ Conexi√≥n a PostgreSQL ------------------
try:
    print("üì° Conectando a PostgreSQL...")
    connection = psycopg2.connect(
        database=os.getenv('PG_DB'),
        user=os.getenv('PG_USER'),
        password=os.getenv('PG_PASSWORD'),
        host=os.getenv('HOST'),
        port=os.getenv('PG_PORT')
    )
    print("‚úÖ Conectado a PostgreSQL")
except psycopg2.Error as e:
    print(f"‚ùå Error al conectar a la base de datos: {e}")
    exit(1)

especialidades = [
    'Cardiolog√≠a', 'Pediatr√≠a', 'Oftalmolog√≠a', 'Neurolog√≠a', 'Dermatolog√≠a',
    'Ginecolog√≠a/Obstetricia', 'Traumatolog√≠a', 'Oncolog√≠a', 'Urolog√≠a', 'Psiquiatr√≠a',
    'Endocrinolog√≠a', 'Reumatolog√≠a', 'Hematolog√≠a', 'Nefrolog√≠a', 'Neumonolog√≠a',
    'Nutriolog√≠a', 'Odontolog√≠a', 'Otorrinolaringolog√≠a', 'Proctolog√≠a', 'Radiolog√≠a',
    'Toxicolog√≠a', 'Anestesiolog√≠a', 'Epidemiolog√≠a', 'Geriatr√≠a', 'Medicina general',
    'Medicina interna', 'Psicolog√≠a', 'Terapia f√≠sica'
]

# ------------------ Crear tablas si no existen ------------------
with connection.cursor() as cursor:
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Doctor (
            dni VARCHAR(8) PRIMARY KEY,
            nombres VARCHAR(50),
            apellidos VARCHAR(50),
            especialidad VARCHAR(100),
            totalcitas INT
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Disponibilidad (
            id SERIAL PRIMARY KEY,
            dia VARCHAR(15),
            hora TIME,
            dni_doctor VARCHAR(8),
            FOREIGN KEY (dni_doctor) REFERENCES Doctor(dni)
        );
    """)
    connection.commit()
    print("üõ†Ô∏è Tablas creadas/verificadas.")

# ------------------ Generar doctores ------------------
def generar_doctores(num):
    doctores = []
    Faker.seed(0)
    for _ in range(num):
        dni = str(faker.unique.random_number(digits=8, fix_len=True))
        nombres = faker.first_name()
        apellidos = faker.last_name()
        especialidad = choice(especialidades)
        totalcitas = randint(0, 100)
        doctores.append((dni, nombres, apellidos, especialidad, totalcitas))
    return doctores

# ------------------ Generar disponibilidades ------------------
def generar_disponibilidades(doctores):
    disponibilidades = []
    dias = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado']
    for doctor in doctores:
        dni_doctor = doctor[0]
        for _ in range(randint(1, 5)):
            dia = choice(dias)
            hora = faker.time()
            disponibilidades.append((dia, hora, dni_doctor))
    return disponibilidades

# ------------------ Insertar datos ------------------
try:
    with connection.cursor() as cursor:
        print("üì• Insertando doctores...")
        doctores = generar_doctores(100)
        cursor.executemany("""
            INSERT INTO Doctor (dni, nombres, apellidos, especialidad, totalcitas)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (dni) DO NOTHING;
        """, doctores)

        print("üì• Insertando disponibilidades...")
        disponibilidades = generar_disponibilidades(doctores)
        cursor.executemany("""
            INSERT INTO Disponibilidad (dia, hora, dni_doctor)
            VALUES (%s, %s, %s);
        """, disponibilidades)

        connection.commit()
        print("‚úÖ Datos generados y almacenados exitosamente.")

except Exception as e:
    print(f"‚ùå Error al insertar datos: {e}")
finally:
    connection.close()
    print("üîí Conexi√≥n cerrada.")
